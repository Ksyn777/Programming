TYP - definiuje rodzaj wartości które mogą przechowywać zmienn
OBIEKT - to konkretna zmienna stworzona na podstawie definicji
VALUE/WARTOŚĆ - wartość danych przechowywanych przez zmienną
VARIABLE/ZMIENNA - to nazwany obszar pamięci przechowujący wartości danego typu 
DECLARATION/DEKLARACJA - informuje kompilator o typie zmiennej 
DEFINITION/DEFINICJA - definiuje typ i wartość zmiennej 
INCREMENT/INKREMENTACJA - zwiekszenie wrtości o 1
CONCATENATION/KONKATENACJA - łączenie stringów
CONVERSION/KONWERSJA - zmiana typu danych 
DECREMENT/DEKREMENTACJA - zmniejszenie wartości o 1
NARROWING/ZWĘŻENIE - konwersja danych, np z double do int
COMPUTATION/OBLICZENIA - Wykonywani eoperacji arytmetycznych przez komputer
EXPRESSION/WYRAŻENIE - to fragment kodu który po wykonaniu zwraca jakaś wartość
STATEMENT/INSTRUKCJA 
LVALUE - coś co można znaleźć po lewej stronie operatora przypisania
CONSTANT EXPRESSION/WYRAŻENIE STAŁE(constexpr) - to wartość wyrażenia która jest ustalana w czasie kompilacji, jets to stała niezmienna
wartość
LITERAL - stała wartość 
MAGIC CONSTANT/MAGICZNA STAŁA - wartość, która jest automatycznie uzupełniana przez kompilator i reprezentuje pewne informacje o kodzie 
źródłowym, np. lokalizację, nazwę funkcji, plik czy linię.
FLOATING POINT VALUES/WARTOŚCI ZMIENNOPRZECINKOWE   


ITERACJE - powtarzanie
    for(dla)
    do...while(powtarzaj)
    while(dopoki)
1.INICJALIZACJA to zwykle instrukcja przypisania stosowana do ustawienia poczatkowej wartości streującej pętlą
2.WARUNEK jest wyrażeniem relacyjnym okreslającym moment zakończenia wykonywania pętli
3.INKREMENTACJA(zwiększenie) lub DEKREMENTACJA(zmniejszenie) definują sposoby modyfikacji zmiennej sterującej pętla.

for(inicjalizacja; warunek; zwiekszanie/zmniejszanie)
{
    instrukcje
}

do 
{
    instrukcje
}
while(warunek);
Bez względu na wartość zmiennej warunek pętla musi zostac wykonana przynajmniej raz.
Program wchodzi do pętli i wykonuje instrukcje, a nastepnie sprawdza czy warunek jest spelniony.
Jesli tak, wraca do poczatku petli, natomiast gdy wystapi false to konczy program. 

while(warunek)
{
    instrukcje
}
Najpierw sprawdza warunek a pozniej wykonuje petle. W szczegolnych przypadkach petla moze wgl nie zostac wykonana

switch(zmienna)
    case 1:
            indtrukcje;
    break;
zmienna może byc int lub char
aby sprawdzic czy zmienna ma wymagany typ uzywamy 
biblioteka #include <cstdlib>
if(!(cin>>zmienna))
{
    cerr<<"To nie jest liczba";
    exit(0);
}

Praca z plikami
biblioteka #include <fstream>
        ZAPIS DO PLIKU
tworzymy zmienne, pobieramy od uzytkownika następnie:
tworzymy plik fstream plik;
otwieramy plik - plik.open("Nazwa.txt", ios::out); 
jeżeli chcemy dołączyc do istniejącego pliku kolejne dane: plik.open("Nazwa.txt", ios::out | ios::app); app od append
wrzucamy pobrane zmienne do plików - plik<<zmienna<<endl;
zamykamy plik: plik.close();
        ODCZYT Z PLIKU
otwieramy plik - plik.open("Nazwa.txt", ios::in); ios::in słuzy do odczytu pliku
if(plik.good()==false) - sprawdza czy plik istnieje
string linia;
getline(plik, linia) - wczytuje jedną linie tekstu
while (getline(plik, linia)) {
    switch(zmienna_nuemr_lini)
    {
        case 1: imie = linia; break;
        case 2: nazwisko = linia; break;
        case 3: numer_tel = linia; break;
    }
    zmienna_numer_lini++;
}
Czyta linie po linie.
    
